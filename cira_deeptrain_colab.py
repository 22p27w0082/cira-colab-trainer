# -*- coding: utf-8 -*-
"""ui.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15p54oOx3LGsF61ptwSXiwR02QFZob20w
"""

#@title Install CiRA Colab Trainer & Mount drive

# Verbose
# !curl -sLf https://raw.githubusercontent.com/CiRA-AMI/cira-colab-trainer/main/boostrap.sh | bash && pip install ipywidgets ipyfilechooser

# No Verbose
import subprocess
ret = subprocess.call(['bash', '-c', 'curl -sLf https://raw.githubusercontent.com/CiRA-AMI/cira-colab-trainer/main/boostrap.sh | bash && pip install ipywidgets ipyfilechooser xattr && rm -rf cira-colab-trainer*'])
if ret != 0:
  print("CiRA Colab Trainer install error...")
else:
  print("CiRA Colab Trainer install complete")

#@title Header

import json, time, os, subprocess, shutil, zipfile, pathlib, datetime
from threading import Timer
from ipywidgets.widgets.widget_string import Label, Text
from IPython.display import Javascript, JSON
from ipyfilechooser import FileChooser
from google.colab import output
from google.colab import files

from ipywidgets import (
    link,
    HTML,
    Button,
    Layout,
    Box,
    VBox,
    HBox,
    Checkbox,
    BoundedIntText,
    BoundedFloatText,
    IntSlider,
    FloatSlider,
    Dropdown,
    IntProgress,
    Accordion
)

flexCol = Layout(
    display="flex", flex_flow="column", border="1px solid gray", margin="2px", padding="5px"
)

wrapLayout = Layout(display="flex", flex_flow="wrap", padding="0px")

class RepeatTimer(Timer):
    def run(self):
        while not self.finished.wait(self.interval):
            self.function(*self.args, **self.kwargs)

#@title Dataset
fcImgFolder = FileChooser('/content')
fcImgFolder.title = '<b>Image Folder:</b>'
fcImgFolder.show_only_dirs = True
fcImgFolder.layout.max_height = '250px'

def handleFcImgPath(chooser:FileChooser):
  if chooser.selected is not None and fcGtfile.selected is None:
    fcGtfile.default_path = chooser.selected

fcImgFolder.register_callback(handleFcImgPath)

fcGtfile = FileChooser('/content')
fcGtfile.title = '<b>GT File:</b>'
fcGtfile.filter_pattern = '*.gt'
fcGtfile.layout.max_height = '250px'

datasetGroup = Box([HTML("<h3 class='text-lg font-bold'>‚óè Dataset</h3>"), fcImgFolder, fcGtfile], layout=flexCol)

# @title Augmentation
# rotation box
rotMinWidget = BoundedIntText(
    value=-180,
    min=-180,
    max=180,
    step=1,
    description="min:",
)
rotMinWidget.layout.width = '170px'

rotMaxWidget = BoundedIntText(
    value=180,
    min=-18,
    max=180,
    step=1,
    description="max:",
)
rotMaxWidget.layout.width = '170px'

rotStepWidget = BoundedIntText(
    value=90,
    min=1,
    max=360,
    step=1,
    description="step:",
)
rotStepWidget.layout.width = '170px'

rotCheckBox = Checkbox(value=True, description="Rotation", disabled=False, indent=False)
rotCheckBox.layout.width = '170px'
rotCheckBox.style.font_weight = 'bold'

rotationBox = Box(
    [
        rotCheckBox,
        rotMinWidget,
        rotMaxWidget,
        rotStepWidget,
    ],
    layout=flexCol,
)


def rotCheckedHandle(a):
    rotMinWidget.disabled = not a["new"]
    rotMaxWidget.disabled = not a["new"]
    rotStepWidget.disabled = not a["new"]


rotCheckBox.observe(rotCheckedHandle, names="value")

# contrast box
contrastMinWidget = BoundedFloatText(
    value=0.2,
    min=0.1,
    max=5,
    step=0.1,
    description="min:",
)
contrastMinWidget.layout.width = '170px'

contrastMaxWidget = BoundedFloatText(
    value=1.2,
    min=0.1,
    max=5,
    step=5,
    description="max:",
)
contrastMaxWidget.layout.width = '170px'

contrastStepWidget = BoundedFloatText(
    value=1.0,
    min=0.1,
    max=5,
    step=0.1,
    description="step:",
)
contrastStepWidget.layout.width = '170px'

contrastCheckBox = Checkbox(
    value=True, description="Contrast", disabled=False, indent=False
)
contrastCheckBox.layout.width = '170px'
contrastBox = Box(
    [contrastCheckBox, contrastMinWidget, contrastMaxWidget, contrastStepWidget],
    layout=flexCol,
)


def contrastCheckedHandle(a):
    contrastMinWidget.disabled = not a["new"]
    contrastMaxWidget.disabled = not a["new"]
    contrastStepWidget.disabled = not a["new"]


contrastCheckBox.observe(contrastCheckedHandle, names="value")

# noise box
noiseMaxWidget = BoundedIntText(
    value=10,
    min=1,
    max=999,
    step=1,
    description="max:",
)
noiseMaxWidget.layout.width = '170px'

noiseStepWidget = BoundedIntText(
    value=10,
    min=1,
    max=999,
    step=1,
    description="step:",
)
noiseStepWidget.layout.width = '170px'

noiseCheckBox = Checkbox(value=True, description="Noise", disabled=False, indent=False)
noiseCheckBox.layout.width = '170px'

noiseBox = Box(
    [noiseCheckBox, noiseMaxWidget, noiseStepWidget],
    layout=flexCol,
)


def noiseCheckedHandle(a):
    noiseMaxWidget.disabled = not a["new"]
    noiseStepWidget.disabled = not a["new"]


noiseCheckBox.observe(noiseCheckedHandle, names="value")

# blur box
blurMaxWidget = BoundedIntText(
    value=9,
    min=1,
    max=999,
    step=1,
    description="max:",
)
blurMaxWidget.layout.width = '170px'

blurStepWidget = BoundedIntText(
    value=9,
    min=1,
    max=999,
    step=1,
    description="step:",
)
blurStepWidget.layout.width = '170px'

blurCheckBox = Checkbox(value=True, description="Blur", disabled=False, indent=False)
blurCheckBox.layout.width = '170px'

blurBox = Box(
    [blurCheckBox, blurMaxWidget, blurStepWidget],
    layout=flexCol,
)


def blurCheckedHandle(a):
    blurMaxWidget.disabled = not a["new"]
    blurStepWidget.disabled = not a["new"]


blurCheckBox.observe(blurCheckedHandle, names="value")

augmentConfigGroup = Accordion(
    children=[
        Box([rotationBox, contrastBox, noiseBox, blurBox], layout=wrapLayout),
    ],
    selected_index = None,
)
augmentConfigGroup.set_title(0, 'Augmentation')


# augmentConfigGroup = Box(
#     [
#         accor,
#       # VBox([HTML("<h3 style='padding: 0; margin: 0;'>Augmentation</h3>"), Box([rotationBox, contrastBox, noiseBox, blurBox], layout=wrapLayout)])
#     ],
#     layout=flexCol,
# )

# @title Gen training files box
modelDropdown = Dropdown(
    options=[
        "V4",
        "V4-tiny",
        "V4-tiny-64",
        "V4-tiny-128",
        "V4-tiny-256",
        "Fastest-1.1-XL-320",
        "Fastest-1.1-320",
        "V7",
        "V7-tiny",
    ],
    value="V4-tiny",
    description="Model:",
)

batchSize = BoundedIntText(description="Batch size:", value=8, min=1, max=999, step=1)
batchSize.layout.width = "150px"
batchSize.layout.margin = "0 0 0 10px"
subDivisions = BoundedIntText(
    description="Sub divisions:", value=8, min=1, max=999, step=1
)
subDivisions.layout.width = "150px"
subDivisions.layout.margin = "0 0 0 10px"

labelWarning = Label("Error file not found")
labelWarning.style.margin = "0"
labelWarning.style.padding = "0"
labelWarning.layout.visibility = "hidden"


def readLogGen():
    jso = {}
    jso["gen_progress"] = 0
    if os.path.exists("/tmp/deeptrain.log"):
        with open("/tmp/deeptrain.log", "r") as f:
            data = f.read()
            if data != "":
                jso = json.loads(data)
    return jso


def callTimerGen():
    jso = readLogGen()
    genProgress.value = jso["gen_progress"]
    genProgressLabel.value = str(jso["gen_progress"]) + "%"


def onGenerateClicked(p):
    btGenFile.disabled = True
    if fcImgFolder.selected is None or fcGtfile.selected is None:
        labelWarning.value = "Error: image folder or gt file not found."
        labelWarning.layout.visibility = "visible"
        btGenFile.disabled = False
        return

    if os.path.exists("/tmp/deeptrain.log"):
        os.remove("/tmp/deeptrain.log")

    labelWarning.layout.visibility = "hidden"
    genProgress.value = 0
    genProgressLabel.value = "0%"

    auto_gen = {}

    if rotCheckBox.value:
        auto_gen["grb_rotation"] = True
        auto_gen["rot_min"] = rotMinWidget.value
        auto_gen["rot_max"] = rotMaxWidget.value
        auto_gen["rot_step"] = rotStepWidget.value

    if contrastCheckBox.value:
        auto_gen["grb_contrast"] = True
        auto_gen["contrast_min"] = contrastMinWidget.value
        auto_gen["contrast_max"] = contrastMaxWidget.value
        auto_gen["contrast_step"] = contrastStepWidget.value

    if noiseCheckBox.value:
        auto_gen["grb_noise"] = True
        auto_gen["noise_max"] = noiseMaxWidget.value
        auto_gen["noise_step"] = noiseStepWidget.value

    if blurCheckBox.value:
        auto_gen["grb_blur"] = True
        auto_gen["blur_max"] = blurMaxWidget.value
        auto_gen["blur_step"] = blurStepWidget.value

    jso = {}
    jso["auto_gen"] = auto_gen
    jso["batch_size"] = batchSize.value
    jso["cmb_model"] = modelDropdown.value
    jso["grb_auto_gen"] = True
    jso["gt_path"] = fcGtfile.selected
    jso["is_override"] = True
    jso["path_gen"] = "/tmp/deeptrain_gen"
    jso["prj_path"] = fcImgFolder.selected
    jso["sub_division"] = subDivisions.value
    jso["use_prebuilt_wg"] = False
    jso["wg"] = "Default   AAAAAAAAAAAAAAAAAAAAAAAAaAAAAA"

    with open("/tmp/deeptrain.json", "w+") as f:
        f.write(json.dumps(jso, indent=2))

    timer = RepeatTimer(1, callTimerGen)
    timer.start()
    subprocess.call(
        [
            "bash",
            "-c",
            "source /opt/ros/melodic/setup.bash && source /root/install/setup.bash && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib && /root/install/lib/cira_colab_deeptrain/cira_colab_deeptrain_run gen --platform offscreen",
        ]
    )
    timer.cancel()
    jso = readLogGen()
    genProgress.value = jso["gen_progress"]
    genProgressLabel.value = str(jso["gen_progress"]) + "%"
    btGenFile.disabled = False


btGenFile = Button(description="Generate", button_style="primary")
btGenFile.on_click(onGenerateClicked)
btGenFile.style.font_weight = "bold"
btGenFile.layout.height = "28px"
btGenFile.layout.margin = "6px 10px 0 0"

genProgress = IntProgress(
    value=30,
    min=0,
    max=100,
    bar_style="info",  # 'success', 'info', 'warning', 'danger' or ''
    style={"bar_color": "#1ec693"},
    orientation="horizontal",
)
genProgress.layout.height = "36px"

genProgressLabel = Label("30%")
genProgressLabel.layout.margin = "6px 0 0 6px"

genTrainingFilesBox = Box(
    [
        HTML("<h3 class='text-lg font-bold'>‚óè Generate Training Files</h3>"),
        VBox(
            [
                Box([modelDropdown, batchSize, subDivisions], layout=wrapLayout),
                HBox([btGenFile, genProgress, genProgressLabel]),
                labelWarning,
            ],
            layout=Layout(display="flex", flex_flow="column", grid_gap="10px", padding="0 0 0 10px")
        ),
    ],
    layout=flexCol,
)

genTrainingGroup = VBox([genTrainingFilesBox])

# @title Training

btTrain = Button(description="Train")
btTrain.add_class("my-button")
btTrain.add_class("bt-train")

avg_loss = -1
is_btExport_enable = False


def readLogTrain():
    global avg_loss, is_btExport_enable

    jso = {}
    jso["avg"] = -1
    jso["backend"] = "Starting..."
    jso["intr"] = 0
    jso["time_sec"] = 0
    jso["time_str"] = "--:--:--"
    if os.path.exists("/tmp/deeptrain.log"):
        with open("/tmp/deeptrain.log", "r") as f:
            data = f.read()
            if data != "":
                tmp_jso = json.loads(data)["train_state"]
                if tmp_jso["intr"] > 0:
                    tmp_jso["backend"] = "Training - " + tmp_jso["backend"]
                    jso = tmp_jso

    avg_loss = jso["avg"]

    if jso['intr'] > 110 and not is_btExport_enable:
      output.eval_js("setEnabled('bt-export', true)")
      is_btExport_enable = True

    # output.eval_js(f"setEnabled('bt-export', {'true' if jso['intr'] > 110 else 'false'})")
    return jso


def callTimerTrain():
    jso = readLogTrain()
    return JSON(jso)


output.register_callback("callTimerTrain", callTimerTrain)


def onTrainClicked(p):
    global is_btExport_enable

    if os.path.exists("/tmp/deeptrain.log"):
        os.remove("/tmp/deeptrain.log")

    btTrain.disabled = True
    subprocess.Popen(
        [
            "bash",
            "-c",
            "source /opt/ros/melodic/setup.bash && source /root/install/setup.bash && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib && /root/install/lib/cira_colab_deeptrain/cira_colab_deeptrain_run train --platform offscreen",
        ]
    )
    output.eval_js("setEnabled('bt-export', false)")
    is_btExport_enable = False
    output.eval_js("start()")
    btTrainStop.disabled = False


btTrain.on_click(onTrainClicked)

btTrainStop = Button(description="Stop")
btTrainStop.add_class("my-button")
btTrainStop.add_class("bt-stop")
btTrainStop.disabled = True


def onTrainStopClicked(p):
    btTrain.disabled = False
    btTrainStop.disabled = True
    # subprocess.call(["touch", "/tmp/deeptrain.stop"])
    f = open("/tmp/deeptrain.stop", "w")
    f.write("stop")
    f.close()
    output.eval_js("stop()")


btTrainStop.on_click(onTrainStopClicked)

btExport = HTML(
    '''<button type="button" id="bt-export" onclick="onExportClicked()"
    class="px-6 bg-purple-400 text-gray-800 font-bold rounded shadow-md enabled:hover:bg-purple-500 enabled:hover:shadow-lg enabled:active:bg-purple-600 enabled:active:shadow-lg disabled:opacity-50" 
    disabled>Export</button>'''
)


def onExportClicked():
    global avg_loss
    output.eval_js("setEnabled('bt-export', false)")
    # btExport.disabled = True

    if os.path.exists("/tmp/deeptrain_gen/data/backup/train.backup"):
        export_filename = (
            datetime.datetime.now().strftime("%Y%m%d_%H_%M_%S") + "_" + str(avg_loss)
        )

        with zipfile.ZipFile(
            f"/tmp/{export_filename}.zip", mode="w"
        ) as archive:
            archive.write(
                "/tmp/deeptrain_gen/data/obj.names",
                arcname=f"{export_filename}/obj.data",
            )
            archive.write(
                "/tmp/deeptrain_gen/data/test.cfg",
                arcname=f"{export_filename}/test.cfg",
            )
            archive.write(
                "/tmp/deeptrain_gen/data/backup/train.backup",
                arcname=f"{export_filename}/train.backup",
            )

        files.download(f"/tmp/{export_filename}.zip")

    time.sleep(5)
    output.eval_js("setEnabled('bt-export', true)")
    # btExport.disabled = False


output.register_callback("onExportClicked", onExportClicked)
# btExport.on_click(onExportClicked)

checkStop = Checkbox(value=False, description="Stop")

trainingGroup = Box(
    [
        HTML("<h3 class='text-lg font-bold'>‚óè Training</h3>"),
        VBox(
            [
                HBox(
                    [
                        VBox(
                            [
                                HBox(
                                    [btTrain, btTrainStop],
                                    layout=Layout(grid_gap="10px"),
                                ),
                                btExport,
                            ],
                            layout=Layout(
                                display="flex", flex_flow="column", grid_gap="10px"
                            ),
                        ),
                        VBox(
                            [
                                HTML("<h2 class='text-xl' id='backend'>---</h2>"),
                                HTML(
                                    "<h1 class='text-4xl'>Avg loss: <span id='avg-loss'>-</span></h1>"
                                ),
                                HTML(
                                    "<h2 class='text-xl'>iteration: <span id='iteration'>-</span></h2>"
                                ),
                                HTML("<h2 class='text-xl' id='time'>--:--:--</h2>"),
                            ]
                        ),
                    ],
                    layout=Layout(display="flex", grid_gap="10px"),
                ),
            ],
            layout=Layout(display="flex", padding="0 0 0 10px"),
        ),
    ],
    layout=flexCol,
)

#@title Style
style = """
<style>
button,
button:active,
button:focus {
  outline: none;
}
.p-Collapse-header,
.p-Collapse-open > .p-Collapse-header {
  padding: 10px 8px;
  font-size: 18px;
  color: var(--colab-primary-text-color);
}
.p-Collapse-open > .p-Collapse-header:hover {
  cursor: pointer;
}
.p-Collapse-contents {
  padding: 0px 10px 4px 10px;
}
.my-button {
  font-weight: bold;
  border-radius: 5px;
  width: fit-content;
  padding: 0 20px;
  cursor: pointer;
}
.bt-train {
  color: #424242;
  background-color: #86e055;
  outline: none;
  border: none;
}
.bt-train:hover {
  opacity: 0.8;
}
.bt-train:disabled {
  cursor: progress;
}
.bt-stop {
  color: #424242;
  background-color: #ed4747;
  outline: none;
}
.bt-stop:hover {
  opacity: 0.8;
}
.bt-stop:disabled {
  cursor: not-allowed;
}
.bt-export {
  color: #424242;
  background-color: #ed4747;
  outline: none;
}
.bt-export:hover {
  opacity: 0.8;
}
.bt-export:disabled {
  cursor: not-allowed;
}
</style>
"""

#@title JS
js = Javascript("""
var timer, timerCount;
var timeStart;
var isRunning = false;

async function updateTimer() {
  const result = await google.colab.kernel.invokeFunction('callTimerTrain', [], {});
  const text = result.data['application/json'];
  document.getElementById("avg-loss").innerHTML = text.avg;
  document.getElementById("iteration").innerHTML = text.intr;
  if (isRunning) {
    document.getElementById("backend").innerHTML = text.backend;
  }
}

function countTime() {
  elapsTime = Date.now() - timeStart;
  document.getElementById("time").innerHTML = msToHMS(elapsTime);
}

function start() {
  document.getElementById("time").innerHTML = "--:--:--";
  timeStart = Date.now()
  isRunning = true;
  timer = setInterval(updateTimer, 1000);
  timerCount = setInterval(countTime, 1000);
}

function stop() {
  clearInterval(timer);
  clearInterval(timerCount);
  isRunning = false;
  document.getElementById("backend").innerHTML = 'Training - Stop';
}

function onExportClicked() {
  google.colab.kernel.invokeFunction('onExportClicked', [], {});
}

function msToHMS( duration ) {
     var milliseconds = parseInt((duration % 1000) / 100),
        seconds = parseInt((duration / 1000) % 60),
        minutes = parseInt((duration / (1000 * 60)) % 60),
        hours = parseInt((duration / (1000 * 60 * 60)) % 24);

      hours = (hours < 10) ? "0" + hours : hours;
      minutes = (minutes < 10) ? "0" + minutes : minutes;
      seconds = (seconds < 10) ? "0" + seconds : seconds;

      return hours + ":" + minutes + ":" + seconds ;
}
function setEnabled(eid, enable) {
  document.getElementById(eid).disabled = !enable;
}
""")

# @title Display
genProgress.value = 0
genProgressLabel.value = "0%"

display(
    HTML('''<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"> '''),
    HTML('''<script src="https://cdn.tailwindcss.com"></script>'''),
    HTML(style),
    js,
    HTML("""
    <div class='flex items-end gap-4'>
      <img src='https://raw.githubusercontent.com/CiRA-AMI/cira-colab-trainer/main/cira_deeptrain_colab_50.png' width='143px' height='79px' />
      <h1 class='text-2xl font-bold'>CiRA DeepTrain Colab</h1>
    </div>"""),
    VBox([datasetGroup, augmentConfigGroup, genTrainingGroup, trainingGroup]),
)
